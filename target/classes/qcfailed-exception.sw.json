{
  "id": "qcFailed",
  "version": "1.0.0",
  "specVersion": "0.8",
  "name": "Handle QC Failed Exception",
  "description": "Handle QC Failed Exception",
  "start": "New QCFailed Request",
  "errors": [
    {
      "name": "service error",
      "code": "java.lang.Exception"
     }
  ],
  "events": [
    {
      "name": "actionsExecutedEvent",
      "source": "actions_executed",
      "type": "actions_executed",
      "correlation": [
        {
          "contextAttributeName": "exceptionid"
        }
      ]
    },
    {
      "name": "new_exception_event_type",
      "source": "qcFailed",
      "type": "new_exception_event_type",
      "correlation": [
        {
          "contextAttributeName": "exceptionid"
        }
      ]
    },
    {
      "name": "HandlingUnitReleasedEvent",
      "type": "handling_unit_released_event",
      "source": "",
      "correlation": [
        {
          "contextAttributeName": "exceptionid"
        }
      ]
    },
    {
      "name": "HandlingUnitCanceledEvent",
      "type": "handling_unit_canceled_event",
      "source": "",
      "correlation": [
        {
          "contextAttributeName": "exceptionid"
        }
      ]
    },
    {
      "name": "ManuallyResolvedProcessEvent",
      "type": "manually_resolved_process_event",
      "source": "",
      "correlation": [
        {
          "contextAttributeName": "exceptionid"
        }
      ]
    },
    {
      "name": "action_executed_exceptionstore_create",
      "source": "actions_executed",
      "type": "action_executed_exceptionstore_create",
      "correlation": [
        {
          "contextAttributeName": "exceptionid"
        }
      ]
    },
    {
      "name": "action_executed_crs_cancelreservation",
      "source": "actions_executed",
      "type": "action_executed_crs_cancelreservation",
      "correlation": [
        {
          "contextAttributeName": "exceptionid"
        }
      ]
    },
    {
      "name": "action_executed_exceptionstore_resolve",
      "source": "actions_executed",
      "type": "action_executed_exceptionstore_resolve",
      "correlation": [
        {
          "contextAttributeName": "exceptionid"
        }
      ]
    },
    {
      "name": "action_executed_exceptionstore_update",
      "source": "actions_executed",
      "type": "action_executed_exceptionstore_update",
      "correlation": [
        {
          "contextAttributeName": "exceptionid"
        }
      ]
    },
    {
      "name": "action_executed_supporthub_createdamageticket",
      "source": "actions_executed",
      "type": "action_executed_supporthub_createdamageticket",
      "correlation": [
        {
          "contextAttributeName": "exceptionid"
        }
      ]
    }
  ],
  "functions": [
    {
      "name": "sendAction",
      "type": "custom",
      "operation": "service:java:org.kie.kogito.examples.EventsService::sendAction"
    }
  ],
  "states": [
    {
      "name": "New QCFailed Request",
      "type": "event",
      "onEvents": [
        {
          "eventRefs": [
            "new_exception_event_type"
          ]
        }
      ],
      "transition": "Push Exception Store"
    },
    {
      "name": "Push Exception Store",
      "type": "callback",
      "action": {
        "functionRef": {
          "refName": "sendAction",
          "arguments": {
            "actionName": "\"ExceptionStore.create\""
          }
        }
      },
      "eventRef": "action_executed_exceptionstore_create",
      "transition": "Assign local status"
    },
    {
      "name": "Assign local status",
      "type": "inject",
      "data": {
        "status": "created"
      },
      "transition": "Cancel CRS Reservation"
    },

    {
      "name": "Cancel CRS Reservation",
      "type": "callback",
      "action": {
        "functionRef": {
          "refName": "sendAction",
          "arguments": {
            "actionName": "\"CRS.cancelReservation\""
          }
        }
      },
      "eventRef": "action_executed_crs_cancelreservation",
      "transition": "Create SupportHub Ticket"
    },
    {
      "name": "Create SupportHub Ticket",
      "type": "callback",
      "action": {
        "functionRef": {
          "refName": "sendAction",
          "arguments": {
            "actionName": "\"SupportHub.createDamageTicket\""
          }
        }
      },
      "eventRef": "action_executed_supporthub_createdamageticket",
      "transition": "Update status to ticket created"
    },
    {
      "name": "Update status to ticket created",
      "type": "callback",
      "action": {
        "functionRef": {
          "refName": "sendAction",
          "arguments": {
            "actionName": "\"ExceptionStore.update\"",
            "eventPayload": "${ {id: .exceptionId, status, availableActions, workflowStatus: \"Ticket created, waiting for resolution\"} }"
          }
        }
      },
      "eventRef": "action_executed_exceptionstore_update",
      "transition": "merge step",
      "onErrors": [
        {
          "errorRef": "service error",
          "transition": "Add error value"
        }
      ]
    },
    {
      "name": "Add error value",
      "type": "inject",
      "data": {
        "errorStatus": "Exception Store Status not updated"
      },
      "transition": "merge step"
    },
    {
      "name": "merge step",
      "type": "inject",
      "data": {

      },
      "transition": "Wait For Answer"
    },
    {
      "name": "Wait For Answer",
      "type": "switch",
      "eventConditions": [
        {
          "eventRef": "HandlingUnitCanceledEvent",
          "transition": "Set status to unit cancelled"
        },
        {
          "eventRef": "HandlingUnitReleasedEvent",
          "transition": "Set status to unit released"
        },
        {
          "eventRef": "ManuallyResolvedProcessEvent",
          "transition": "Set status to manually resolved"
        }
      ],
      "timeouts": {
        "eventTimeout": "P61D"
      },
      "defaultCondition": {
        "transition": "Create SupportHub Ticket"
      }
    },
    {
      "name": "Set status to manually resolved",
      "type": "inject",
      "data": {
        "workflowStatus": "Exception manually resolved"
      },
      "transition": "Update exception status"
    },
    {
      "name": "Set status to unit cancelled",
      "type": "inject",
      "data": {
        "workflowStatus": "Handling Unit cancelled"
      },
      "transition": "Update exception status"
    },
    {
      "name": "Set status to unit released",
      "type": "inject",
      "data": {
        "workflowStatus": "Handling Unit has left the facility"
      },
      "transition": "Update exception status"
    },
    {
      "name": "Update exception status",
      "type": "callback",
      "action": {
        "functionRef": {
          "refName": "sendAction",
          "arguments": {
            "actionName": "\"ExceptionStore.update\"",
            "eventPayload": "${ {id: .exceptionId, status, availableActions, workflowStatus} }"
          }
        }
      },
      "eventRef": "action_executed_exceptionstore_update",
      "transition": "Resolve Exception",
      "onErrors": [
        {
          "errorRef": "service error",
          "transition": "Resolve Exception"
        }
      ]
    },
    {
      "name": "Resolve Exception",
      "type": "callback",
      "action": {
        "functionRef": {
          "refName": "sendAction",
          "arguments": {
            "actionName": "\"ExceptionStore.resolve\""
          }
        }
      },
      "eventRef": "action_executed_exceptionstore_resolve",
      "end": true
    }
  ]
}
